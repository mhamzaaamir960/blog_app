generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId()
  username        String   @unique
  fullName        String
  email           String   @unique
  password        String
  confirmPassword String
  profilePicture  String?
  profile         Profile?

  follower  Follow[] @relation("follower")
  following Follow[] @relation("following")

  posts        Post[]
  comments     Comments[]
  like         Like?
  refreshToken String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Profile {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId()
  bio      String?
  role     String?
  user     User    @relation(fields: [username], references: [username])
  username String  @unique
}

model Follow {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId()
  followedAt DateTime @default(now())

  follower  User @relation("follower", fields: [followerId], references: [id])
  following User @relation("following", fields: [followingId], references: [id])

  followerId  String @db.ObjectId()
  followingId String @db.ObjectId()

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([followerId, followingId])
}

model Post {
  id          String @id @default(auto()) @map("_id") @db.ObjectId()
  title       String
  description String
  category    String
  author      User   @relation(fields: [authorId], references: [username])
  authorId    String

  comments Comments[]
  likes    Like[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comments {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId()
  content String
  Post    Post?   @relation(fields: [postId], references: [id])
  postId  String? @db.ObjectId()
  User    User?   @relation(fields: [userId], references: [id])
  userId  String? @db.ObjectId()

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([postId, userId])
}

model Like {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId()
  isLiked Boolean @default(false)
  Post    Post?   @relation(fields: [postId], references: [id])
  postId  String? @db.ObjectId()
  User    User?   @relation(fields: [userId], references: [id])
  userId  String? @unique @db.ObjectId()

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([postId, userId])
}
